# ==============================================================================
# Snakemake workflow: Demultiplexing of Illumina sequencing data 
#                     containing unique molecular identifiers (UMIs)
#
# Author: Raphael Hablesreiter (raphael.hablesreiter@charite.de)
#         Robert Altwasser (robert.altwasser@charite.de
#
# Description:
# Snakemake implementation of IDT analysis guidlines "Demultiplexing Illumina 
# sequencing data containing unique molecular identifiers (UMIs)".
# ==============================================================================

# ==============================================================================
# Initialization of workflow
# ==============================================================================

import pandas as pd
import numpy as np
# from snakemake.utils import validate
# from snakemake.utils import min_version
# 
# min_version("5.7.1")
# 
# # configfile: "config_stroke.yaml"
# # configfile: "config/config1081.yaml"
# configfile: "config/config1162.yaml"
# # configfile: "config1156.yaml"
# validate(config, schema="schemas/config.schema.yaml")
# 
# workdir: config["general"]["work_dir"]


### Get sample ->Lane matrix
LANES=["1","2"]
SAMPLES=["A","B"]
barcode_file_prefix= "/home/altwassr/ablage/P1081/P1081_barcode"
library_file_prefix= "/home/altwassr/ablage/P1081/P1081_library_params"

temp_samples = pd.Series([], dtype = "str", name = "samples")
temp_lanes = pd.Series([], dtype = "str", name = "lanes")
for lane in LANES:
    df = pd.read_csv(barcode_file_prefix + lane + ".csv", sep = '\t')
    
    temp_samples = pd.concat([temp_samples, df.iloc[:,0]])
    temp_lanes = pd.concat([temp_lanes, pd.Series(np.repeat(lane, df.iloc[:,0].size))])


### Dict mapping samples to lanes
samples_lanes = dict(zip(temp_samples, temp_lanes))

### Method to return the name of 'barcode_metrices' file for sample name
def get_barcode_file_for_sample(wildcards):
    return "metrices/barcode_metrices" + samples_lanes[wildcards.sample] + ".csv"

# # Get sample names from barcode file
# df = pd.read_csv(config["general"]["barcode_file"], sep = '\t', index_col = 'barcode_name')
# SAMPLES = df.index
# 
# print(SAMPLES)


rule all:
    input:
        "fastq/sample_AML-111.txt",
        "fastq/sample_AML-385.txt"
        #expand("lane_{lane}/{sample}_lane_{lane}.txt", sample=SAMPLES, lane=LANES)
        # "qc/multiqc_reads.html",
        # "qc/multiqc_alignments.html"

rule demux:
    input:
        get_barcode_file_for_sample
    output:
        "fastq/sample_{sample}.fastq"
    shell:
        """
        mkdir -p fastq
        touch {output}
        """

rule test_barcodes:
    input:
        "starter.txt"
    output:
        "metrices/barcode_metrices{lane}.csv"
    shell:
        """
        mkdir -p metrices
        touch {output}
        """
# # ==============================================================================
# # Include rules
# # ==============================================================================
# 
# if config["general"]["demux"]:
#     include: "rules/demux.smk"
# 
# include: "rules/qc.smk"
# include: "rules/tools.smk"
# 
# # ==============================================================================
# # Results
# # ==============================================================================
