import os
import re
import yaml
import argparse
import math
import importlib.util
# import pysam
from snakemake.utils import min_version

min_version("8.10")

# ############ SETUP ##############################

configfile: "/data/cephfs-1/home/users/hablesrr_c/work/repos/umi-processing-v2.2/config/configA5031_BASE.yaml"

workdir: config["general"]["work_dir"] + "variantcalling/"

samples = os.listdir(config["general"]["work_dir"] + "demux/mapped")
samples = list(filter(lambda x:'.realigned.bam' in x, samples))
samples = list(filter(lambda x:'.bai' not in x, samples)) ### ROBERT: otherwise index files stay in Samples
samples = [s.replace('.realigned.bam', '') for s in samples]

list(filter(lambda x:'.bai' in x, samples))

file_ending = ".realigned.bam"
input_bam = {}
for sample in samples:
    input_bam[sample] = ''.join([config["general"]["work_dir"], "demux/mapped/", sample, file_ending])


# ############ INCLUDES ##############################
# include helper functions
include: "rules/io.smk"
include: "rules/utils.smk"
include: "rules/resources.smk"

include: "rules/variantcalling.smk"
include: "rules/annotate.smk"
include: "rules/filterbam.smk"


# specified wildcards have to match the regex
wildcard_constraints:
    # eg sample cannot contain _ or / to prevent ambiguous wildcards
    sample = "[^/.]+",
    read = "[^_/.]+",
    read_or_index = "[^_/.]+",
    filter = "filter[0-9]+"
    # folder = "^((?!filter).)*$"


# ############## MASTER RULE ##############################################

rule all:
    input:
        # "logs/save/varcall/done.txt"
        expand("vardict/{sample}.csv", sample = samples),
        "filter/variantcalls.csv"

###########################################################################
